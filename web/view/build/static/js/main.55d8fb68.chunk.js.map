{"version":3,"sources":["CIDRForm.js","SubnetTable.js","App.js","reportWebVitals.js","index.js"],"names":["reducer","state","action","data","name","value","hasError","error","isFormValid","type","CIDRForm","props","useState","search","setSearch","open","setOpen","useReducer","address","prefix","dispatch","fileRef","useRef","handleSearch","onSearch","handleChange","e","target","validateInput","key","item","test","Grid","columns","Column","Form","onSubmit","Group","inline","Input","label","width","onChange","Button","disabled","Confirm","content","onCancel","onConfirm","textAlign","Ref","innerRef","fileReader","FileReader","readAsText","files","onload","onUpload","result","current","style","display","margin","onKeyDown","icon","Icon","onClick","link","placeholder","click","onDownload","drawTableBody","network","subnet","rows","parent","activeRowRef","groupBy","obj","maxPrefix","index","children","row","maxHeight","root","onNote","onDivide","cidr","note","push","map","child","i","cell","Table","Cell","active","onJoin","rowSpan","numVisibleChild","selectable","DivideButton","basic","size","NoteTextArea","setNote","TextArea","fluid","borderStyle","onBlur","SubnetRow","ipRangediff","availableIPMin","availableIPMax","temp","split","Row","borderTop","mask","singleLine","hosts","colSpan","SubnetTable","networks","entry","subnets","drawNetwork","useEffect","focus","scrollIntoView","celled","structured","border","Header","HeaderCell","Body","App","axios","defaults","headers","post","Map","qs","require","addSubnet","length","deleteSubnet","maxPref","getMaxPrefix","getMaxHeight","updateNote","searchNode","activeNode","as","Divider","hidden","addr","pref","stringify","then","response","set","catch","console","log","Object","fromEntries","JSON","parse","blob","Blob","url","URL","createObjectURL","document","createElement","href","setAttribute","newsubnets","entries","searchStr","get","CIDR","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.55d8fb68.chunk.js","sourcesContent":["import React, { useState, useRef, useReducer } from 'react'\nimport { Button, Form, Confirm, Grid, Ref, Input, Icon } from 'semantic-ui-react'\n\nconst reducer = (state, action) => {\n  const { name, value, hasError, error, isFormValid } = action.data\n  switch (action.type) {\n    case 'UPDATE':\n      return {\n        ...state,\n        [name]: { value, hasError, error },\n        isFormValid\n      }\n    default:\n      return { ...state }\n  }\n}\nconst CIDRForm = (props) => {\n  const [search, setSearch] = useState('')\n  const [open, setOpen] = useState(false)\n\n  const [state, dispatch] = useReducer(reducer,\n    {\n      address: { value: '192.168.0.0', hasError: false, error: '' },\n      prefix: { value: '25', hasError: false, error: '' },\n      isFormValid: true\n    })\n  const fileRef = useRef(null)\n\n  const handleConfirm = () => {\n    props.onSubmit(state.address.value, state.prefix.value)\n    setOpen(false)\n  }\n  const handleCancel = () => {\n    setOpen(false)\n  }\n  const handleDownload = () => {\n    props.onDownload()\n  }\n  const handleUpload = (e) => {\n    const fileReader = new FileReader();\n    fileReader.readAsText(e.target.files[0], \"UTF-8\");\n    fileReader.onload = e => {\n      props.onUpload(e.target.result)\n    };\n    fileRef.current.value = ''\n  }\n  const handleSearch = () => {\n    if (search !== '') {\n      props.onSearch(search)\n    }\n  }\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    const { hasError, error } = validateInput(name, value)\n    let isFormValid = true\n    for (const key in state) {\n      const item = state[key]\n      if (key === name && hasError) {\n        isFormValid = false\n        break\n      } else if (key !== name && item.hasError) {\n        isFormValid = false\n        break\n      }\n    }\n    dispatch({ type: 'UPDATE', data: { name, value, hasError, error, isFormValid } })\n  }\n  const validateInput = (name, value) => {\n    let hasError = false, error = ''\n    switch (name) {\n      case 'address':\n        if (!/^[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}$/.test(value)) {\n          hasError = true\n        }\n        break\n      case 'prefix':\n        if (!/^([0-9]|[1-2][0-9]|3[0-2])$/.test(value)) {\n          hasError = true\n        }\n        break\n      default:\n        hasError = true\n    }\n    return { hasError, error }\n  }\n\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Form onSubmit={() => setOpen(true)}>\n          <Form.Group inline>\n            <Form.Input name='address' error={state.address.hasError && true} label='CIDR:' width={4} onChange={handleChange} value={state.address.value} />\n            <Form.Input name='prefix' error={state.prefix.hasError && true} label='/' width={2} onChange={handleChange} value={state.prefix.value} />\n            <Button type='submit' disabled={!state.isFormValid && true}>Submit</Button>\n            <Confirm open={open} content='All subnets will be gone. Continue?' onCancel={handleCancel} onConfirm={handleConfirm} />\n          </Form.Group>\n          {/* <Message error header='Error' content='You can only sign up for an account once with a given e-mail address.' /> */}\n        </Form>\n      </Grid.Column>\n      <Grid.Column textAlign='right'>\n        <Ref innerRef={fileRef}>\n          <input onChange={handleUpload} type='file' style={{ display: 'none' }} />\n        </Ref>\n        <Input style={{ margin: '0 .25em 0 0' }}\n          onKeyDown={(e) => e.key === 'Enter' ? handleSearch() : null}\n          onChange={e => setSearch(e.target.value)}\n          icon={<Icon onClick={handleSearch} name='search' link />}\n          placeholder='Search...'\n        />\n        <Button type='button' onClick={e => fileRef.current.click()}>Upload</Button>\n        <Button type='button' onClick={handleDownload}>Download</Button>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default CIDRForm","import React, { useState, useRef, useEffect } from 'react'\nimport { Table, Form, Button, TextArea, Ref } from 'semantic-ui-react'\n\nconst drawTableBody = (network, subnet, rows, parent, props, activeRowRef, groupBy, obj, maxPrefix, index) => {\n    if (subnet == null) {\n        return\n    }\n    if (subnet.children == null) {\n        const row =\n            <SubnetRow\n                maxHeight={props.maxHeight} key={subnet.cidr + network + subnet.note} network={network} groupBy={obj.root && groupBy}\n                subnet={subnet} onNote={props.onNote} onDivide={props.onDivide} parent={parent} maxPrefix={maxPrefix} index={index}\n\n            />\n        obj.root = false\n        rows.push(row)\n        return\n    }\n    subnet.children.map((child, i) => {\n        if (i === 0) {\n            var cell =\n                <Table.Cell active={subnet.active ? 'active' : ''}\n                    onClick={() => { props.onJoin(subnet.cidr, network) }} style={{ textAlign: \"right\" }}\n                    rowSpan={subnet.numVisibleChild} selectable={subnet.numVisibleChild > 1 ? 'true' : 'false'}>/{subnet.prefix}\n                </Table.Cell>\n            if (subnet.active) {\n                cell = <Ref innerRef={activeRowRef}>{cell}</Ref>\n            }\n            parent = <>{cell}{parent}</>\n        }\n        else {\n            parent = null\n        }\n        return drawTableBody(network, child, rows, parent, props, activeRowRef, groupBy, obj, maxPrefix, index)\n    })\n}\n\nconst DivideButton = (props) => {\n    const handleClick = () => {\n        props.onDivide(props.subnet.cidr, props.network)\n    }\n    return (\n        <Button basic size='mini' onClick={handleClick}>Divide</Button>\n    )\n}\nconst NoteTextArea = (props) => {\n    const [note, setNote] = useState(props.subnet.note)\n    const handleChange = (e) => {\n        setNote(e.target.value)\n        // props.onChange(props.subnet.cidr, e.target.value)\n    }\n    return (\n        <Form>\n            <TextArea fluid rows={1} style={{ borderStyle: 'none' }}\n                onBlur={(e) => { props.onChange(props.subnet.cidr, e.target.value, props.network) }}\n                onChange={handleChange} value={note}\n            />\n        </Form>\n    )\n}\nconst SubnetRow = (props) => {\n    const ipRangediff = props.subnet.availableIPMin !== props.subnet.availableIPMax\n    const temp = props.maxPrefix - props.subnet.prefix + 1 + props.maxHeight - (props.maxPrefix - props.network.split(\"/\")[1] + 1)\n    const divStyle = {\n        borderTop: 'solid 2px grey',\n    };\n    return (\n        <Table.Row style={props.groupBy && props.index !== 0 ? divStyle : null}>\n            {props.groupBy}\n            <Table.Cell>{props.subnet.cidr}</Table.Cell>\n            <Table.Cell>{props.subnet.mask}</Table.Cell>\n            <Table.Cell singleLine>{props.subnet.availableIPMin} {ipRangediff ? '- ' + props.subnet.availableIPMax : ''}</Table.Cell>\n            <Table.Cell>{props.subnet.hosts}</Table.Cell>\n            <Table.Cell>\n                <NoteTextArea onChange={props.onNote} subnet={props.subnet} network={props.network} />\n            </Table.Cell>\n            <Table.Cell>\n                {props.subnet.hosts > 1 &&\n                    <DivideButton onDivide={props.onDivide} subnet={props.subnet} network={props.network} />\n                }\n            </Table.Cell>\n            <Table.Cell active={props.subnet.active ? 'active' : ''} style={{ textAlign: \"right\" }} colSpan={temp}>/{props.subnet.prefix}</Table.Cell>\n            {props.parent}\n        </Table.Row>\n    )\n}\nconst drawNetwork = (props, rows, activeRowRef) => {\n    var index = 0\n    for (const [network, entry] of props.networks) {\n        var groupBy = <Table.Cell rowSpan={entry.subnets.numVisibleChild}>{network}</Table.Cell>\n        drawTableBody(network, entry.subnets, rows, null, props, activeRowRef, groupBy, { root: true }, entry.maxPrefix, index)\n        index++\n    }\n}\nconst SubnetTable = (props) => {\n    const activeRowRef = useRef(null)\n    const rows = []\n    drawNetwork(props, rows, activeRowRef)\n    // drawTableBody(props.subnets, rows, null, props, activeRowRef)\n    useEffect(() => {\n        if (activeRowRef.current != null) {\n            activeRowRef.current.focus()\n            activeRowRef.current.scrollIntoView(false)\n        }\n    })\n    return (\n        <Table celled structured style={{ border: '2px solid grey' }}>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Network address</Table.HeaderCell>\n                    <Table.HeaderCell>Subnet address</Table.HeaderCell>\n                    <Table.HeaderCell>Netmask</Table.HeaderCell>\n                    <Table.HeaderCell>Available IPs</Table.HeaderCell>\n                    <Table.HeaderCell>Hosts</Table.HeaderCell>\n                    <Table.HeaderCell>Note</Table.HeaderCell>\n                    <Table.HeaderCell></Table.HeaderCell>\n                    <Table.HeaderCell colSpan={props.networks != null ? props.maxHeight : 1}></Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {rows}\n            </Table.Body>\n        </Table>\n    )\n}\n\nexport default SubnetTable","import { useReducer } from 'react';\nimport { Header, Divider } from 'semantic-ui-react'\nimport axios from \"axios\";\nimport CIDRForm from './CIDRForm';\nimport SubnetTable from './SubnetTable';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'submit':\n      return {\n        networks: action.networks, maxHeight: action.maxHeight\n      }\n    case 'divide':\n      return {\n        networks: action.networks, maxHeight: action.maxHeight > state.maxHeight ? action.maxHeight : state.maxHeight\n      }\n    case 'join':\n      return {\n        networks: action.networks, maxHeight: action.maxHeight\n      }\n    case 'note':\n      return {\n        ...state, networks: action.networks\n      }\n    case 'upload':\n      return {\n        networks: action.networks, maxHeight: action.maxHeight\n      }\n    case 'search':\n      return {\n        ...state, networks: action.networks\n      }\n    default:\n      return { ...state }\n  }\n}\nfunction App() {\n  // axios.defaults.baseURL = 'http://localhost:8080'\n  axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\n\n  const [state, dispatch] = useReducer(reducer, { networks: new Map(), maxHeight: 0 })\n  // const [networks, setNetworks] = useState(new Map())\n  const qs = require('qs')\n\n  const addSubnet = (root, cidr, children) => {\n    if (root.cidr === cidr) {\n      root.children = children\n      root.children[0].note = root.note\n      root.numVisibleChild += 1\n      return 1\n    }\n    if (root.children == null) {\n      return 0\n    }\n    for (var i = 0; i < root.children.length; i++) {\n      if (addSubnet(root.children[i], cidr, children) === 1) {\n        root.numVisibleChild += 1\n        return 1\n      }\n    }\n    return 0\n  }\n  const deleteSubnet = (root, cidr) => {\n    if (root.cidr === cidr) {\n      root.children = null\n      const temp = root.numVisibleChild\n      root.numVisibleChild = 1\n      return temp - 1\n    }\n    if (root.children == null) {\n      return 0\n    }\n    for (var i = 0; i < root.children.length; i++) {\n      const temp = deleteSubnet(root.children[i], cidr)\n      root.numVisibleChild -= temp\n      if (temp > 0) {\n        return temp\n      }\n    }\n    return 0\n  }\n  var maxPref = 0\n  const getMaxPrefix = (root) => {\n    if (root.children == null) {\n      if (root.prefix > maxPref) {\n        maxPref = root.prefix\n      }\n    }\n    else {\n      for (var i = 0; i < root.children.length; i++) {\n        getMaxPrefix(root.children[i])\n      }\n    }\n  }\n\n  const getMaxHeight = (networks) => {\n    var maxHeight = 0\n    for (const [network, entry] of networks) {\n      if (entry.maxPrefix - entry.subnets.prefix + 1 > maxHeight) {\n        maxHeight = entry.maxPrefix - entry.subnets.prefix + 1\n      }\n    }\n    return maxHeight\n  }\n  const updateNote = (root, cidr, note) => {\n    if (root.cidr === cidr) {\n      root.note = note\n      return true\n    }\n\n    if (root.children == null) {\n      return false\n    }\n    for (var i = 0; i < root.children.length; i++) {\n      if (updateNote(root.children[i], cidr, note)) {\n        return true\n      }\n    }\n    return false\n  }\n  const searchNode = (root, activeNode) => {\n    if (root.active) {\n      root.active = false\n    }\n    if (root.cidr === activeNode.cidr) {\n      root.active = true\n    }\n    if (root.children == null) {\n      return false\n    }\n    for (var i = 0; i < root.children.length; i++) {\n      searchNode(root.children[i], activeNode)\n    }\n    return false\n  }\n  const handleSubmit = (addr, pref) => {\n    axios.post('/subnet', qs.stringify({ address: addr, prefix: pref }))\n      .then(function (response) {\n        const root = new Map(state.networks)\n        root.set(response.data.cidr, { subnets: response.data, maxPrefix: pref })\n        // setNetworks(root)\n        dispatch({ type: 'submit', networks: root, maxHeight: getMaxHeight(root) })\n      })\n      .catch(function (error) {\n        console.log(error)\n      });\n  }\n  const handleDivide = (cidr, network) => {\n    axios.post('/divide', qs.stringify({ cidr: cidr }))\n      .then(function (response) {\n        const children = response.data\n        const root = new Map(state.networks) //JSON.parse(JSON.stringify(networks.get(network)))\n        addSubnet(root.get(network).subnets, cidr, children)\n        if (children[0].prefix > root.get(network).maxPrefix) {\n          root.get(network).maxPrefix = children[0].prefix\n        }\n        // setNetworks(root)\n        dispatch({ type: 'divide', networks: root, maxHeight: getMaxHeight(root) })\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  const handleJoin = (cidr, network) => {\n    const root = new Map(state.networks) // JSON.parse(JSON.stringify(networks.get(network)))\n    deleteSubnet(root.get(network).subnets, cidr)\n    getMaxPrefix(root.get(network).subnets)\n    getMaxPrefix(root)\n    root.get(network).maxPrefix = maxPref\n    // setNetworks(root)\n    dispatch({ type: 'join', networks: root, maxHeight: getMaxHeight(root) })\n  }\n  const handleNote = (cidr, note, network) => {\n    const root = new Map(state.networks) //JSON.parse(JSON.stringify(state.subnets.get(network)))\n    updateNote(root.get(network).subnets, cidr, note)\n    // setNetworks(networks.set(network, { subnets: root, maxPrefix: networks.get(network).maxPrefix }))\n    dispatch({ type: 'note', networks: root })\n  }\n  const handleDownload = () => {\n    axios.post('/download', Object.fromEntries(state.networks)\n      //  new Blob([JSON.stringify(state.networks)], { type: \"application/json\" })\n    )\n      .then(function (response) {\n        var obj = JSON.parse(JSON.stringify(response.data))\n        const blob = new Blob([JSON.stringify(obj, null, 5)], { type: \"text/plain\" })\n\n        const url = URL.createObjectURL(blob)\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', 'networks.txt')\n        link.click()\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  const handleUpload = (newsubnets) => {\n    axios.post(\n      '/upload', newsubnets\n    )\n      .then(function (response) {\n        const root = new Map(Object.entries(response.data))\n        dispatch({ type: 'upload', networks: root, maxHeight: getMaxHeight(root) })\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  const handleSearch = (searchStr) => {\n    if (state.networks == null) {\n      return\n    }\n    axios.post(\n      '/search', { network: Object.fromEntries(state.networks), cidr: searchStr }\n      // new Blob([JSON.stringify({ network: Object.fromEntries(state.subnets), cidr: searchStr })], { type: \"application/json\" }),\n    )\n      .then(function (response) {\n        const root = new Map(state.networks)\n        const result = new Map(Object.entries(response.data))\n        if (result.size === 0) {\n          for (const [network] of root) {\n            searchNode(root.get(network).subnets, { CIDR: '' })\n          }\n        } else {\n          for (const [network, entry] of result) {\n            searchNode(root.get(network).subnets, entry)\n          }\n        }\n        // searchNode(root, response.data)\n        dispatch({ type: 'search', networks: root })\n      })\n      .catch(function (error) {\n        const root = new Map(state.networks)\n        for (const [network] of root) {\n          searchNode(root.get(network).subnets, { CIDR: '' })\n        }\n        dispatch({ type: 'search', networks: root })\n      });\n  }\n  return (\n    <>\n      <Header as='h1'>IPv4 Subnetting</Header>\n      <Divider hidden />\n      <CIDRForm onSubmit={handleSubmit} onDownload={handleDownload} onUpload={handleUpload} onSearch={handleSearch} />\n      <Divider hidden />\n      <SubnetTable networks={state.networks} maxHeight={state.maxHeight} onDivide={handleDivide} onJoin={handleJoin} onNote={handleNote} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}